// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: calendar.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Calendar_CreateEventProto_FullMethodName      = "/internalgrpc.Calendar/CreateEventProto"
	Calendar_EditEventProto_FullMethodName        = "/internalgrpc.Calendar/EditEventProto"
	Calendar_DeleteEventProto_FullMethodName      = "/internalgrpc.Calendar/DeleteEventProto"
	Calendar_ListEventByDateProto_FullMethodName  = "/internalgrpc.Calendar/ListEventByDateProto"
	Calendar_ListEventByWeakProto_FullMethodName  = "/internalgrpc.Calendar/ListEventByWeakProto"
	Calendar_ListEventByMonthProto_FullMethodName = "/internalgrpc.Calendar/ListEventByMonthProto"
)

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalendarClient interface {
	CreateEventProto(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	EditEventProto(ctx context.Context, in *EditEventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	DeleteEventProto(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	ListEventByDateProto(ctx context.Context, in *ListEventByDateRequest, opts ...grpc.CallOption) (*ListEventResponse, error)
	ListEventByWeakProto(ctx context.Context, in *ListEventByWeakRequest, opts ...grpc.CallOption) (*ListEventResponse, error)
	ListEventByMonthProto(ctx context.Context, in *ListEventByMonthRequest, opts ...grpc.CallOption) (*ListEventResponse, error)
}

type calendarClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarClient(cc grpc.ClientConnInterface) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) CreateEventProto(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, Calendar_CreateEventProto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) EditEventProto(ctx context.Context, in *EditEventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, Calendar_EditEventProto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteEventProto(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, Calendar_DeleteEventProto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) ListEventByDateProto(ctx context.Context, in *ListEventByDateRequest, opts ...grpc.CallOption) (*ListEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventResponse)
	err := c.cc.Invoke(ctx, Calendar_ListEventByDateProto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) ListEventByWeakProto(ctx context.Context, in *ListEventByWeakRequest, opts ...grpc.CallOption) (*ListEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventResponse)
	err := c.cc.Invoke(ctx, Calendar_ListEventByWeakProto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) ListEventByMonthProto(ctx context.Context, in *ListEventByMonthRequest, opts ...grpc.CallOption) (*ListEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventResponse)
	err := c.cc.Invoke(ctx, Calendar_ListEventByMonthProto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
// All implementations must embed UnimplementedCalendarServer
// for forward compatibility.
type CalendarServer interface {
	CreateEventProto(context.Context, *CreateEventRequest) (*EventResponse, error)
	EditEventProto(context.Context, *EditEventRequest) (*EventResponse, error)
	DeleteEventProto(context.Context, *DeleteEventRequest) (*EventResponse, error)
	ListEventByDateProto(context.Context, *ListEventByDateRequest) (*ListEventResponse, error)
	ListEventByWeakProto(context.Context, *ListEventByWeakRequest) (*ListEventResponse, error)
	ListEventByMonthProto(context.Context, *ListEventByMonthRequest) (*ListEventResponse, error)
	mustEmbedUnimplementedCalendarServer()
}

// UnimplementedCalendarServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalendarServer struct{}

func (UnimplementedCalendarServer) CreateEventProto(context.Context, *CreateEventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventProto not implemented")
}
func (UnimplementedCalendarServer) EditEventProto(context.Context, *EditEventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEventProto not implemented")
}
func (UnimplementedCalendarServer) DeleteEventProto(context.Context, *DeleteEventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventProto not implemented")
}
func (UnimplementedCalendarServer) ListEventByDateProto(context.Context, *ListEventByDateRequest) (*ListEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventByDateProto not implemented")
}
func (UnimplementedCalendarServer) ListEventByWeakProto(context.Context, *ListEventByWeakRequest) (*ListEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventByWeakProto not implemented")
}
func (UnimplementedCalendarServer) ListEventByMonthProto(context.Context, *ListEventByMonthRequest) (*ListEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventByMonthProto not implemented")
}
func (UnimplementedCalendarServer) mustEmbedUnimplementedCalendarServer() {}
func (UnimplementedCalendarServer) testEmbeddedByValue()                  {}

// UnsafeCalendarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarServer will
// result in compilation errors.
type UnsafeCalendarServer interface {
	mustEmbedUnimplementedCalendarServer()
}

func RegisterCalendarServer(s grpc.ServiceRegistrar, srv CalendarServer) {
	// If the following call pancis, it indicates UnimplementedCalendarServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Calendar_ServiceDesc, srv)
}

func _Calendar_CreateEventProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CreateEventProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_CreateEventProto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CreateEventProto(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_EditEventProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).EditEventProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_EditEventProto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).EditEventProto(ctx, req.(*EditEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteEventProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteEventProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_DeleteEventProto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteEventProto(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_ListEventByDateProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).ListEventByDateProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_ListEventByDateProto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).ListEventByDateProto(ctx, req.(*ListEventByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_ListEventByWeakProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventByWeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).ListEventByWeakProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_ListEventByWeakProto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).ListEventByWeakProto(ctx, req.(*ListEventByWeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_ListEventByMonthProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventByMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).ListEventByMonthProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_ListEventByMonthProto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).ListEventByMonthProto(ctx, req.(*ListEventByMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calendar_ServiceDesc is the grpc.ServiceDesc for Calendar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calendar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internalgrpc.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventProto",
			Handler:    _Calendar_CreateEventProto_Handler,
		},
		{
			MethodName: "EditEventProto",
			Handler:    _Calendar_EditEventProto_Handler,
		},
		{
			MethodName: "DeleteEventProto",
			Handler:    _Calendar_DeleteEventProto_Handler,
		},
		{
			MethodName: "ListEventByDateProto",
			Handler:    _Calendar_ListEventByDateProto_Handler,
		},
		{
			MethodName: "ListEventByWeakProto",
			Handler:    _Calendar_ListEventByWeakProto_Handler,
		},
		{
			MethodName: "ListEventByMonthProto",
			Handler:    _Calendar_ListEventByMonthProto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}
